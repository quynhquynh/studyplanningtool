package studyplanningtool;

import java.util.ArrayList; 
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.awt.event.ActionEvent;
import javax.swing.JTable;
import javax.swing.border.BevelBorder; 
import javax.swing.table.DefaultTableModel;






public class StudyPlanningTool extends JFrame { //JFrame is needed for GUI 
	private static final long serialVersionUID = 1L;
	final static int MAX_QTY = 20;
	//Private variables
	private CourseQueries courseQueries; //instance of the CourseQueries class
	private ArrayList<Course> allCourses; //array to store all courses
	private JTextField txtSearchField;
	static JTable tableCourses;
	static JButton btnAddCourse;
	static JButton btnUpdateCourse;
	DefaultTableModel tableModel;
	
	
	//Constants for table columns
	private static final int ID_COL = 0;
	private static final int COURSE_COL = 1;
	private static final int SEMESTER_COL = 2;
	private static final int STATUS_COL = 3;
	private static final int STATUS_STRING_COL = 4;
	private static final int COL_COUNT = 5;
	
	//Constructor for StudyPlanningTool
	public StudyPlanningTool() {
		super("Personal Planning Tool"); //A call to superclass's constructor method to set the title
		setBounds(0,0,500,331); //Set the size of the frame
		getContentPane().setLayout(null);
		
		//GUI elements (code generated by WindowBuilder)
		txtSearchField = new JTextField();
		txtSearchField.setBounds(15, 16, 297, 26);
		getContentPane().add(txtSearchField);
		txtSearchField.setColumns(10);
		
		//A button to search for courses
		JButton btnSearch = new JButton("Search");
		btnSearch.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				searchCourses(); //Search button clicked -> search courses in the database
			}
		});
		btnSearch.setBounds(313, 15, 115, 29);
		getContentPane().add(btnSearch);
		
		
		//Table for showing search results
		tableCourses = new JTable();
		tableCourses.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		tableCourses.setBounds(15, 50, 413, 100);
		tableModel = new DefaultTableModel(
				new Object[10][COL_COUNT],  
				new String[] {"ID", "Course", "Semester", "", "Status"} // Set the column names
			);
		tableCourses.setModel(tableModel);
		
		//Let's make ID and availability columns hidden. We remove them from the visible table
		//but they will be kept in the model and can be accessed using tableCourses.getModel().getValueAt().
		
		tableCourses.removeColumn(tableCourses.getColumnModel().getColumn(STATUS_COL));
		//tableCourses.removeColumn(tableCourses.getColumnModel().getColumn(ID_COL));
		
		getContentPane().add(tableCourses);
		
		
		//A button to update a course's status
		JButton btnStatus = new JButton("Change status");
		btnStatus.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				updateCourseStatus();
			}
		});
		btnStatus.setBounds(15, 169, 170, 29);
		getContentPane().add(btnStatus);
		
		//A button to delete a course
		JButton btnDelete = new JButton("Delete Course");
		btnDelete.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				deleteCourse();
			}
		});
		btnDelete.setBounds(15, 199, 170, 29);
		getContentPane().add(btnDelete);		
		
		//A button to add a course
		btnAddCourse = new JButton("Add Course");
		btnAddCourse.setBounds(15, 229, 170, 29);
		getContentPane().add(btnAddCourse);
		
		MyEventHandler commandHandler = new MyEventHandler();
		btnAddCourse.addActionListener(commandHandler);//"Add course" button clicked
		
		//A button to update a course semester, course name and course id
		btnUpdateCourse = new JButton("Update course");
		btnUpdateCourse.setBounds(15, 259, 170, 29);
		getContentPane().add(btnUpdateCourse);
		
		MyEventHandler2 commandHandler2 = new MyEventHandler2();
		btnUpdateCourse.addActionListener(commandHandler2);
		
		//instantiate CourseQueries object to get the connection to db ready
		courseQueries = new CourseQueries();
		
		
	}
	
	//Main method
	public static void main(String args[]) {
		StudyPlanningTool frame = new StudyPlanningTool();
		frame.setVisible(true);
		
	}
	
	//searchCourses - Queries the database for coursess and lists them in a table
	 
	private void searchCourses() {
		
		Course currentCourse;
		
		
		allCourses = courseQueries.getCourses(txtSearchField.getText()); // Calling the CourseQueries method that returns a list containing all courses from the database
		tableModel.setRowCount(allCourses.size());
		for (int row=0; row<allCourses.size(); row++){ //allCourses.size() returns the amount of items in the allCourses list
			currentCourse = allCourses.get(row); // get a course from the ArrayList allCourses
			tableCourses.getModel().setValueAt(currentCourse.getID(), row, ID_COL);
			tableCourses.getModel().setValueAt(currentCourse.getCourse(), row, COURSE_COL);
			tableCourses.getModel().setValueAt(currentCourse.getSemester(), row, SEMESTER_COL);
			tableCourses.getModel().setValueAt(currentCourse.getStatus(), row, STATUS_COL);
			tableCourses.getModel().setValueAt(currentCourse.getStatusString(), row, STATUS_STRING_COL);
		}
	}
	
	// update a selected course's status
	private void updateCourseStatus() {
		
		courseQueries.updateCourseStatus(Integer.parseInt(tableCourses.getModel().getValueAt(tableCourses.getSelectedRow(), ID_COL).toString()), !(Boolean.parseBoolean(tableCourses.getModel().getValueAt(tableCourses.getSelectedRow(), STATUS_COL).toString())));
		
		searchCourses();
	}
	
	//delete a selected course
	private void deleteCourse() {
		int row = tableCourses.getSelectedRow();
		DefaultTableModel model = (DefaultTableModel)tableCourses.getModel();
		String selectedCell= model.getValueAt(row,  COURSE_COL).toString();
		model.removeRow(row);
		
		try{
			Connection connection = DriverManager.getConnection("jdbc:mysql://eu-cdbr-azure-west-b.cloudapp.net:3306/le_quynh", "bf402aae0ad158", "68f9b788"); // connect to the database
			PreparedStatement deleteCourse = connection.prepareStatement("DELETE FROM courses WHERE course='"+selectedCell+"' ");
			deleteCourse.executeUpdate();
			System.out.println("deleted");
			
		}catch (SQLException sqlException)
		{
			sqlException.printStackTrace();
		}
	}
	
	
	//this class manages the action after Add course button clicked
	private class MyEventHandler implements ActionListener
	{
		public void actionPerformed (ActionEvent myEvent)
		{
			if (myEvent.getSource() == btnAddCourse){
				if (allCourses.size() < MAX_QTY){ // If the current amount of courses in the database is smaller than MAX_QTY ...
					getNewCourseFromUser();
					searchCourses();// Assigning a new TableModel to the updated data
				}
				else{
					JOptionPane.showMessageDialog(null, "You can not add more courses in your PSP", "Info", JOptionPane.INFORMATION_MESSAGE);// exceed the MAX_QTY
				}			
			}
		}
	}
	
	
	//method to display a frame to get 1 new course
	private void getNewCourseFromUser(){
		// create fields for all parameters
		JTextField idField = new JTextField(10);
		JTextField courseField = new JTextField(10);
		JComboBox<String> semesterField = new JComboBox<String>();
	    JTextField statusField = new JTextField(10);
	  
 
	    JPanel myPanel = new JPanel();
	    
	    myPanel.add(new JLabel("Id:"));
	    myPanel.add(idField);
	    
	    myPanel.add(new JLabel("Course:"));
	    myPanel.add(courseField);
	    
	    
	    myPanel.add(new JLabel("Semester:"));
	    myPanel.add(semesterField);
        semesterField.addItem("Spring");
        semesterField.addItem("Autumn");
	    
	    myPanel.add(new JLabel("Status:"));
	    myPanel.add(statusField);

	   
	 
	    int result = JOptionPane.showConfirmDialog(null, myPanel, "Enter details of Course", JOptionPane.OK_CANCEL_OPTION);
	    
	    if (result == JOptionPane.OK_OPTION) {	    	
	    	// get the number value of the inputed id by using Integer.parseInt, get boolean value of inputed status by using Boolean.parseBoolean
	    	courseQueries.addCourse(Integer.parseInt(idField.getText()), courseField.getText(), semesterField.getSelectedItem(), Boolean.parseBoolean(statusField.getText()));
	    }
	}
	
	
	//this class manages the action after button Update Course clicked
	private class MyEventHandler2 implements ActionListener
	{
		public void actionPerformed (ActionEvent myEvent)
		{
			if (myEvent.getSource() == btnUpdateCourse){
				
				editCourse();
				searchCourses();// new updated data table
				
			}else{
					JOptionPane.showMessageDialog(null, "Choose the course you want to update!", "Info", JOptionPane.INFORMATION_MESSAGE);
			}			
		}
		
	}
	
	
	//display the table field to get updated data
	private void editCourse(){
		 DefaultTableModel model = (DefaultTableModel)tableCourses.getModel();
		   
	     
	     int row = tableCourses.getSelectedRow();
	     String selectedRow = model.getValueAt(row, ID_COL).toString();
		
	     JTextField idField = new JTextField(10);
	    JTextField courseField = new JTextField(10);
		JComboBox<String> semesterField = new JComboBox<String>();
		
 
	    JPanel myPanel = new JPanel(); 
	    
	    myPanel.add(new JLabel("Id:"));
	    myPanel.add(idField);
	    
	    myPanel.add(new JLabel("Course:"));
	    myPanel.add(courseField);
	    
	    myPanel.add(new JLabel("Semester:"));
	    myPanel.add(semesterField);
        semesterField.addItem("Spring");
        semesterField.addItem("Autumn");
        
        
	
	    int result = JOptionPane.showConfirmDialog(null, myPanel, "Update semester", JOptionPane.OK_CANCEL_OPTION);
	    
	    if (result == JOptionPane.OK_OPTION) {	    	
	    	// get the number value of the inputed id by using Integer.parseInt
	    	courseQueries.updateCourse(Integer.parseInt(idField.getText()), courseField.getText(), semesterField.getSelectedItem(), selectedRow);
	    	System.out.print("updated");
	    }
	}
	
	
}